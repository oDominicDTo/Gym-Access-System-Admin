// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 3748044336097075588),
      name: 'Member',
      lastPropertyId: const IdUid(26, 345754059898093024),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 9026767816712122798),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(13, 5788129214567572943),
            name: 'firstName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 2413816776795001885),
            name: 'lastName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 7593278007052107825),
            name: 'contactNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 6696026095842803512),
            name: 'membershipTypeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 9220823875031468001),
            relationTarget: 'MembershipType'),
        ModelProperty(
            id: const IdUid(19, 7587890181390779687),
            name: 'nfcTagID',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 7652988575071154012),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 5429982170979899301),
            name: 'dateOfBirth',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 4985405420510405406),
            name: 'address',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 1566255455413648655),
            name: 'membershipStartDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 2701655918142605216),
            name: 'membershipEndDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 5957749286008793752),
            name: 'photoPath',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 345754059898093024),
            name: 'checkedIn',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(3, 6736217485813754610),
            name: 'attendance',
            targetId: const IdUid(18, 2081315261096462691))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 2984732517655358409),
      name: 'MembershipType',
      lastPropertyId: const IdUid(5, 6288213097031078528),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 9182839263428512215),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 924860437331411374),
            name: 'typeName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2961982082893044264),
            name: 'fee',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 10604965359477169),
            name: 'discount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6288213097031078528),
            name: 'isLifetime',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 6306018231033438161),
      name: 'Administrator',
      lastPropertyId: const IdUid(6, 7786986850897892930),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4125466394964549531),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5066433988226746852),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8050502793383891001),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3907427976412737726),
            name: 'nfcTagID',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4136632901090055812),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(8, 1991822988256613916)),
        ModelProperty(
            id: const IdUid(6, 7786986850897892930),
            name: 'type',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 788978535339810145),
      name: 'RenewalLog',
      lastPropertyId: const IdUid(8, 3182573676858122943),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4314453429701557409),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 3459498858212329392),
            name: 'renewalDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 654207595721476097),
            name: 'memberId',
            type: 11,
            flags: 520,
            indexId: const IdUid(7, 1735341259590220276),
            relationTarget: 'Member'),
        ModelProperty(
            id: const IdUid(5, 3083483458353823720),
            name: 'addedDurationDays',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 4250344304555983422),
      name: 'CheckIn',
      lastPropertyId: const IdUid(3, 959515500019605461),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3589808727678625238),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2130941890027434785),
            name: 'memberId',
            type: 11,
            flags: 520,
            indexId: const IdUid(10, 6979038591882905776),
            relationTarget: 'Member'),
        ModelProperty(
            id: const IdUid(3, 959515500019605461),
            name: 'checkInTime',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(11, 6200012836170653188),
      name: 'CheckOut',
      lastPropertyId: const IdUid(3, 7584122991086285350),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6234137489678793912),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8510225582063035397),
            name: 'memberId',
            type: 11,
            flags: 520,
            indexId: const IdUid(11, 9021452178579632282),
            relationTarget: 'Member'),
        ModelProperty(
            id: const IdUid(3, 7584122991086285350),
            name: 'checkOutTime',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(13, 6886693126471221766),
      name: 'UserFeedback',
      lastPropertyId: const IdUid(7, 4393122270738686167),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4705647527423871332),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4342998513534389053),
            name: 'submissionTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4622151738921595494),
            name: 'feedbackText',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7033015700571339670),
            name: 'category',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1145766092219023240),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8956989881464025423),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4393122270738686167),
            name: 'isUser',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(15, 7772235705929313319),
      name: 'AdminRenewalLog',
      lastPropertyId: const IdUid(10, 6509957765120067021),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6711648076912626894),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1260194032390783042),
            name: 'renewalDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3843739889110435778),
            name: 'amount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6068771707186174779),
            name: 'memberName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4151446149217037214),
            name: 'adminName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5625649490804205479),
            name: 'membershipType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 6509957765120067021),
            name: 'addedDurationDays',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(16, 5879127561156471048),
      name: 'CardChangeLog',
      lastPropertyId: const IdUid(4, 3272371887379826667),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8497852175753991072),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 805287833305421862),
            name: 'entityType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2553070895354824665),
            name: 'entityName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3272371887379826667),
            name: 'changeDate',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(17, 911722525332705996),
      name: 'NewMemberLog',
      lastPropertyId: const IdUid(9, 2701727070414414081),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5598080865478918257),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3682861670383672930),
            name: 'creationDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4453717152096912947),
            name: 'amount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1422952817569272112),
            name: 'adminName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 9212662791149283230),
            name: 'memberName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2701727070414414081),
            name: 'membershipType',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(18, 2081315261096462691),
      name: 'Attendance',
      lastPropertyId: const IdUid(4, 4123573638309648325),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5317237823587812643),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5230130202438955630),
            name: 'memberId',
            type: 5,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3352998470332577348),
            name: 'checkInTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4123573638309648325),
            name: 'checkOutTime',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(18, 2081315261096462691),
      lastIndexId: const IdUid(18, 8367150605901343270),
      lastRelationId: const IdUid(3, 6736217485813754610),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        2820634563096386653,
        4791937999762440180,
        94537486811857848,
        1500853826776324486,
        8465745737525015078,
        4878952722867786680,
        7111581215987727205
      ],
      retiredIndexUids: const [
        5016079819760097089,
        1031270484984883474,
        2120226973327850613,
        6947746077445817224,
        2348804463278203920,
        6265988615060526806,
        1963462599147352398,
        8367150605901343270
      ],
      retiredPropertyUids: const [
        7215617545020444247,
        277679724193056298,
        6615543424447086408,
        6841392619987245636,
        615075402634005090,
        5091391286527150474,
        3441854909883553164,
        6073846162601961073,
        7917382204248819544,
        51433292769410626,
        6069712064201288121,
        7505092549254043189,
        3476232581982776087,
        3505108149545887651,
        2959878710206970280,
        7903212712206819593,
        6220206829420078622,
        1620603911374805699,
        5541981984867774193,
        4136168887959246208,
        2981336468151332057,
        8440122022333707946,
        3092609652524573519,
        3983741942389938392,
        2787234717695244036,
        6580537644837925493,
        7602121418930220813,
        3047784573000814593,
        1164576801395953825,
        6592798801754862354,
        3271993741847166389,
        8916212275688911714,
        4869879890159906831,
        8210820910057928503,
        8639423661332126905,
        7898786416960736453,
        5721533878214496513,
        3461113781989910008,
        8422020990824527431,
        2934446171703836321,
        161082913807456200,
        3305671715137747278,
        5154307912716198441,
        6753371959831567981,
        3182573676858122943,
        2804252960713488687,
        1418545532584207685,
        7341745565348888331,
        7276322085100816622,
        9047186856383652257,
        980136744478674287,
        4414367922735005008,
        5963594393753213004,
        2173068232630115283,
        6669964360131324254,
        5215538072195219068,
        1561428821361172620
      ],
      retiredRelationUids: const [337373602936818043, 3094033825849941879],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Member: EntityDefinition<Member>(
        model: _entities[0],
        toOneRelations: (Member object) => [object.membershipType],
        toManyRelations: (Member object) =>
            {RelInfo<Member>.toMany(3, object.id): object.attendance},
        getId: (Member object) => object.id,
        setId: (Member object, int id) {
          object.id = id;
        },
        objectToFB: (Member object, fb.Builder fbb) {
          final firstNameOffset = fbb.writeString(object.firstName);
          final lastNameOffset = fbb.writeString(object.lastName);
          final contactNumberOffset = fbb.writeString(object.contactNumber);
          final nfcTagIDOffset = fbb.writeString(object.nfcTagID);
          final emailOffset = fbb.writeString(object.email);
          final addressOffset = fbb.writeString(object.address);
          final photoPathOffset = fbb.writeString(object.photoPath);
          fbb.startTable(27);
          fbb.addInt64(0, object.id);
          fbb.addOffset(12, firstNameOffset);
          fbb.addOffset(13, lastNameOffset);
          fbb.addOffset(14, contactNumberOffset);
          fbb.addInt64(15, object.membershipType.targetId);
          fbb.addOffset(18, nfcTagIDOffset);
          fbb.addOffset(19, emailOffset);
          fbb.addInt64(20, object.dateOfBirth.millisecondsSinceEpoch);
          fbb.addOffset(21, addressOffset);
          fbb.addInt64(22, object.membershipStartDate.millisecondsSinceEpoch);
          fbb.addInt64(23, object.membershipEndDate.millisecondsSinceEpoch);
          fbb.addOffset(24, photoPathOffset);
          fbb.addBool(25, object.checkedIn);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Member(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              firstName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 28, ''),
              lastName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 30, ''),
              contactNumber: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 32, ''),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 42, ''),
              dateOfBirth: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 44, 0)),
              address: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 46, ''),
              nfcTagID: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 40, ''),
              membershipEndDate: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 50, 0)),
              photoPath: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 52, ''),
              checkedIn: const fb.BoolReader().vTableGet(buffer, rootOffset, 54, false),
              membershipStartDate: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 48, 0)));
          object.membershipType.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0);
          object.membershipType.attach(store);
          InternalToManyAccess.setRelInfo<Member>(
              object.attendance, store, RelInfo<Member>.toMany(3, object.id));
          return object;
        }),
    MembershipType: EntityDefinition<MembershipType>(
        model: _entities[1],
        toOneRelations: (MembershipType object) => [],
        toManyRelations: (MembershipType object) => {},
        getId: (MembershipType object) => object.id,
        setId: (MembershipType object, int id) {
          object.id = id;
        },
        objectToFB: (MembershipType object, fb.Builder fbb) {
          final typeNameOffset = fbb.writeString(object.typeName);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, typeNameOffset);
          fbb.addFloat64(2, object.fee);
          fbb.addFloat64(3, object.discount);
          fbb.addBool(4, object.isLifetime);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = MembershipType(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              typeName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fee: const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0),
              discount:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0),
              isLifetime: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 12, false));

          return object;
        }),
    Administrator: EntityDefinition<Administrator>(
        model: _entities[2],
        toOneRelations: (Administrator object) => [],
        toManyRelations: (Administrator object) => {},
        getId: (Administrator object) => object.id,
        setId: (Administrator object, int id) {
          object.id = id;
        },
        objectToFB: (Administrator object, fb.Builder fbb) {
          final usernameOffset = fbb.writeString(object.username);
          final passwordOffset = fbb.writeString(object.password);
          final nfcTagIDOffset = fbb.writeString(object.nfcTagID);
          final nameOffset = fbb.writeString(object.name);
          final typeOffset = fbb.writeString(object.type);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, usernameOffset);
          fbb.addOffset(2, passwordOffset);
          fbb.addOffset(3, nfcTagIDOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, typeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Administrator(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              type: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              username: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              password: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              nfcTagID: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));

          return object;
        }),
    RenewalLog: EntityDefinition<RenewalLog>(
        model: _entities[3],
        toOneRelations: (RenewalLog object) => [object.member],
        toManyRelations: (RenewalLog object) => {},
        getId: (RenewalLog object) => object.id,
        setId: (RenewalLog object, int id) {
          object.id = id;
        },
        objectToFB: (RenewalLog object, fb.Builder fbb) {
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addInt64(2, object.renewalDate.millisecondsSinceEpoch);
          fbb.addInt64(3, object.member.targetId);
          fbb.addInt64(4, object.addedDurationDays);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = RenewalLog(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              renewalDate: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              addedDurationDays:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          object.member.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.member.attach(store);
          return object;
        }),
    CheckIn: EntityDefinition<CheckIn>(
        model: _entities[4],
        toOneRelations: (CheckIn object) => [object.member],
        toManyRelations: (CheckIn object) => {},
        getId: (CheckIn object) => object.id,
        setId: (CheckIn object, int id) {
          object.id = id;
        },
        objectToFB: (CheckIn object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.member.targetId);
          fbb.addInt64(2, object.checkInTime.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CheckIn(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              checkInTime: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              member: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)));
          object.member.attach(store);
          return object;
        }),
    CheckOut: EntityDefinition<CheckOut>(
        model: _entities[5],
        toOneRelations: (CheckOut object) => [object.member],
        toManyRelations: (CheckOut object) => {},
        getId: (CheckOut object) => object.id,
        setId: (CheckOut object, int id) {
          object.id = id;
        },
        objectToFB: (CheckOut object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.member.targetId);
          fbb.addInt64(2, object.checkOutTime.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CheckOut(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              checkOutTime: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              member: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 6, 0)));
          object.member.attach(store);
          return object;
        }),
    UserFeedback: EntityDefinition<UserFeedback>(
        model: _entities[6],
        toOneRelations: (UserFeedback object) => [],
        toManyRelations: (UserFeedback object) => {},
        getId: (UserFeedback object) => object.id,
        setId: (UserFeedback object, int id) {
          object.id = id;
        },
        objectToFB: (UserFeedback object, fb.Builder fbb) {
          final feedbackTextOffset = fbb.writeString(object.feedbackText);
          final categoryOffset = object.category == null
              ? null
              : fbb.writeString(object.category!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.submissionTime.millisecondsSinceEpoch);
          fbb.addOffset(2, feedbackTextOffset);
          fbb.addOffset(3, categoryOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, titleOffset);
          fbb.addBool(6, object.isUser);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserFeedback(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              submissionTime: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0)),
              feedbackText: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              category: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              isUser: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 16, false),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12));

          return object;
        }),
    AdminRenewalLog: EntityDefinition<AdminRenewalLog>(
        model: _entities[7],
        toOneRelations: (AdminRenewalLog object) => [],
        toManyRelations: (AdminRenewalLog object) => {},
        getId: (AdminRenewalLog object) => object.id,
        setId: (AdminRenewalLog object, int id) {
          object.id = id;
        },
        objectToFB: (AdminRenewalLog object, fb.Builder fbb) {
          final memberNameOffset = fbb.writeString(object.memberName);
          final adminNameOffset = fbb.writeString(object.adminName);
          final membershipTypeOffset = fbb.writeString(object.membershipType);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.renewalDate.millisecondsSinceEpoch);
          fbb.addFloat64(5, object.amount);
          fbb.addOffset(6, memberNameOffset);
          fbb.addOffset(7, adminNameOffset);
          fbb.addOffset(8, membershipTypeOffset);
          fbb.addInt64(9, object.addedDurationDays);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AdminRenewalLog(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              renewalDate: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0)),
              memberName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              adminName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              membershipType: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              addedDurationDays:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0),
              amount: const fb.Float64Reader()
                  .vTableGet(buffer, rootOffset, 14, 0));

          return object;
        }),
    CardChangeLog: EntityDefinition<CardChangeLog>(
        model: _entities[8],
        toOneRelations: (CardChangeLog object) => [],
        toManyRelations: (CardChangeLog object) => {},
        getId: (CardChangeLog object) => object.id,
        setId: (CardChangeLog object, int id) {
          object.id = id;
        },
        objectToFB: (CardChangeLog object, fb.Builder fbb) {
          final entityTypeOffset = fbb.writeString(object.entityType);
          final entityNameOffset = fbb.writeString(object.entityName);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, entityTypeOffset);
          fbb.addOffset(2, entityNameOffset);
          fbb.addInt64(3, object.changeDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CardChangeLog(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              entityType: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              entityName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              changeDate: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)));

          return object;
        }),
    NewMemberLog: EntityDefinition<NewMemberLog>(
        model: _entities[9],
        toOneRelations: (NewMemberLog object) => [],
        toManyRelations: (NewMemberLog object) => {},
        getId: (NewMemberLog object) => object.id,
        setId: (NewMemberLog object, int id) {
          object.id = id;
        },
        objectToFB: (NewMemberLog object, fb.Builder fbb) {
          final adminNameOffset = fbb.writeString(object.adminName);
          final memberNameOffset = fbb.writeString(object.memberName);
          final membershipTypeOffset = fbb.writeString(object.membershipType);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.creationDate.millisecondsSinceEpoch);
          fbb.addFloat64(5, object.amount);
          fbb.addOffset(6, adminNameOffset);
          fbb.addOffset(7, memberNameOffset);
          fbb.addOffset(8, membershipTypeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = NewMemberLog(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              creationDate: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0)),
              memberName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              adminName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              membershipType: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              amount: const fb.Float64Reader()
                  .vTableGet(buffer, rootOffset, 14, 0));

          return object;
        }),
    Attendance: EntityDefinition<Attendance>(
        model: _entities[10],
        toOneRelations: (Attendance object) => [],
        toManyRelations: (Attendance object) => {},
        getId: (Attendance object) => object.id,
        setId: (Attendance object, int id) {
          object.id = id;
        },
        objectToFB: (Attendance object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt32(1, object.memberId);
          fbb.addInt64(2, object.checkInTime.millisecondsSinceEpoch);
          fbb.addInt64(3, object.checkOutTime?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final checkOutTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final object = Attendance(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              checkInTime: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              checkOutTime: checkOutTimeValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(checkOutTimeValue),
              memberId:
                  const fb.Int32Reader().vTableGet(buffer, rootOffset, 6, 0));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Member] entity fields to define ObjectBox queries.
class Member_ {
  /// see [Member.id]
  static final id = QueryIntegerProperty<Member>(_entities[0].properties[0]);

  /// see [Member.firstName]
  static final firstName =
      QueryStringProperty<Member>(_entities[0].properties[1]);

  /// see [Member.lastName]
  static final lastName =
      QueryStringProperty<Member>(_entities[0].properties[2]);

  /// see [Member.contactNumber]
  static final contactNumber =
      QueryStringProperty<Member>(_entities[0].properties[3]);

  /// see [Member.membershipType]
  static final membershipType =
      QueryRelationToOne<Member, MembershipType>(_entities[0].properties[4]);

  /// see [Member.nfcTagID]
  static final nfcTagID =
      QueryStringProperty<Member>(_entities[0].properties[5]);

  /// see [Member.email]
  static final email = QueryStringProperty<Member>(_entities[0].properties[6]);

  /// see [Member.dateOfBirth]
  static final dateOfBirth =
      QueryIntegerProperty<Member>(_entities[0].properties[7]);

  /// see [Member.address]
  static final address =
      QueryStringProperty<Member>(_entities[0].properties[8]);

  /// see [Member.membershipStartDate]
  static final membershipStartDate =
      QueryIntegerProperty<Member>(_entities[0].properties[9]);

  /// see [Member.membershipEndDate]
  static final membershipEndDate =
      QueryIntegerProperty<Member>(_entities[0].properties[10]);

  /// see [Member.photoPath]
  static final photoPath =
      QueryStringProperty<Member>(_entities[0].properties[11]);

  /// see [Member.checkedIn]
  static final checkedIn =
      QueryBooleanProperty<Member>(_entities[0].properties[12]);

  /// see [Member.attendance]
  static final attendance =
      QueryRelationToMany<Member, Attendance>(_entities[0].relations[0]);
}

/// [MembershipType] entity fields to define ObjectBox queries.
class MembershipType_ {
  /// see [MembershipType.id]
  static final id =
      QueryIntegerProperty<MembershipType>(_entities[1].properties[0]);

  /// see [MembershipType.typeName]
  static final typeName =
      QueryStringProperty<MembershipType>(_entities[1].properties[1]);

  /// see [MembershipType.fee]
  static final fee =
      QueryDoubleProperty<MembershipType>(_entities[1].properties[2]);

  /// see [MembershipType.discount]
  static final discount =
      QueryDoubleProperty<MembershipType>(_entities[1].properties[3]);

  /// see [MembershipType.isLifetime]
  static final isLifetime =
      QueryBooleanProperty<MembershipType>(_entities[1].properties[4]);
}

/// [Administrator] entity fields to define ObjectBox queries.
class Administrator_ {
  /// see [Administrator.id]
  static final id =
      QueryIntegerProperty<Administrator>(_entities[2].properties[0]);

  /// see [Administrator.username]
  static final username =
      QueryStringProperty<Administrator>(_entities[2].properties[1]);

  /// see [Administrator.password]
  static final password =
      QueryStringProperty<Administrator>(_entities[2].properties[2]);

  /// see [Administrator.nfcTagID]
  static final nfcTagID =
      QueryStringProperty<Administrator>(_entities[2].properties[3]);

  /// see [Administrator.name]
  static final name =
      QueryStringProperty<Administrator>(_entities[2].properties[4]);

  /// see [Administrator.type]
  static final type =
      QueryStringProperty<Administrator>(_entities[2].properties[5]);
}

/// [RenewalLog] entity fields to define ObjectBox queries.
class RenewalLog_ {
  /// see [RenewalLog.id]
  static final id =
      QueryIntegerProperty<RenewalLog>(_entities[3].properties[0]);

  /// see [RenewalLog.renewalDate]
  static final renewalDate =
      QueryIntegerProperty<RenewalLog>(_entities[3].properties[1]);

  /// see [RenewalLog.member]
  static final member =
      QueryRelationToOne<RenewalLog, Member>(_entities[3].properties[2]);

  /// see [RenewalLog.addedDurationDays]
  static final addedDurationDays =
      QueryIntegerProperty<RenewalLog>(_entities[3].properties[3]);
}

/// [CheckIn] entity fields to define ObjectBox queries.
class CheckIn_ {
  /// see [CheckIn.id]
  static final id = QueryIntegerProperty<CheckIn>(_entities[4].properties[0]);

  /// see [CheckIn.member]
  static final member =
      QueryRelationToOne<CheckIn, Member>(_entities[4].properties[1]);

  /// see [CheckIn.checkInTime]
  static final checkInTime =
      QueryIntegerProperty<CheckIn>(_entities[4].properties[2]);
}

/// [CheckOut] entity fields to define ObjectBox queries.
class CheckOut_ {
  /// see [CheckOut.id]
  static final id = QueryIntegerProperty<CheckOut>(_entities[5].properties[0]);

  /// see [CheckOut.member]
  static final member =
      QueryRelationToOne<CheckOut, Member>(_entities[5].properties[1]);

  /// see [CheckOut.checkOutTime]
  static final checkOutTime =
      QueryIntegerProperty<CheckOut>(_entities[5].properties[2]);
}

/// [UserFeedback] entity fields to define ObjectBox queries.
class UserFeedback_ {
  /// see [UserFeedback.id]
  static final id =
      QueryIntegerProperty<UserFeedback>(_entities[6].properties[0]);

  /// see [UserFeedback.submissionTime]
  static final submissionTime =
      QueryIntegerProperty<UserFeedback>(_entities[6].properties[1]);

  /// see [UserFeedback.feedbackText]
  static final feedbackText =
      QueryStringProperty<UserFeedback>(_entities[6].properties[2]);

  /// see [UserFeedback.category]
  static final category =
      QueryStringProperty<UserFeedback>(_entities[6].properties[3]);

  /// see [UserFeedback.name]
  static final name =
      QueryStringProperty<UserFeedback>(_entities[6].properties[4]);

  /// see [UserFeedback.title]
  static final title =
      QueryStringProperty<UserFeedback>(_entities[6].properties[5]);

  /// see [UserFeedback.isUser]
  static final isUser =
      QueryBooleanProperty<UserFeedback>(_entities[6].properties[6]);
}

/// [AdminRenewalLog] entity fields to define ObjectBox queries.
class AdminRenewalLog_ {
  /// see [AdminRenewalLog.id]
  static final id =
      QueryIntegerProperty<AdminRenewalLog>(_entities[7].properties[0]);

  /// see [AdminRenewalLog.renewalDate]
  static final renewalDate =
      QueryIntegerProperty<AdminRenewalLog>(_entities[7].properties[1]);

  /// see [AdminRenewalLog.amount]
  static final amount =
      QueryDoubleProperty<AdminRenewalLog>(_entities[7].properties[2]);

  /// see [AdminRenewalLog.memberName]
  static final memberName =
      QueryStringProperty<AdminRenewalLog>(_entities[7].properties[3]);

  /// see [AdminRenewalLog.adminName]
  static final adminName =
      QueryStringProperty<AdminRenewalLog>(_entities[7].properties[4]);

  /// see [AdminRenewalLog.membershipType]
  static final membershipType =
      QueryStringProperty<AdminRenewalLog>(_entities[7].properties[5]);

  /// see [AdminRenewalLog.addedDurationDays]
  static final addedDurationDays =
      QueryIntegerProperty<AdminRenewalLog>(_entities[7].properties[6]);
}

/// [CardChangeLog] entity fields to define ObjectBox queries.
class CardChangeLog_ {
  /// see [CardChangeLog.id]
  static final id =
      QueryIntegerProperty<CardChangeLog>(_entities[8].properties[0]);

  /// see [CardChangeLog.entityType]
  static final entityType =
      QueryStringProperty<CardChangeLog>(_entities[8].properties[1]);

  /// see [CardChangeLog.entityName]
  static final entityName =
      QueryStringProperty<CardChangeLog>(_entities[8].properties[2]);

  /// see [CardChangeLog.changeDate]
  static final changeDate =
      QueryIntegerProperty<CardChangeLog>(_entities[8].properties[3]);
}

/// [NewMemberLog] entity fields to define ObjectBox queries.
class NewMemberLog_ {
  /// see [NewMemberLog.id]
  static final id =
      QueryIntegerProperty<NewMemberLog>(_entities[9].properties[0]);

  /// see [NewMemberLog.creationDate]
  static final creationDate =
      QueryIntegerProperty<NewMemberLog>(_entities[9].properties[1]);

  /// see [NewMemberLog.amount]
  static final amount =
      QueryDoubleProperty<NewMemberLog>(_entities[9].properties[2]);

  /// see [NewMemberLog.adminName]
  static final adminName =
      QueryStringProperty<NewMemberLog>(_entities[9].properties[3]);

  /// see [NewMemberLog.memberName]
  static final memberName =
      QueryStringProperty<NewMemberLog>(_entities[9].properties[4]);

  /// see [NewMemberLog.membershipType]
  static final membershipType =
      QueryStringProperty<NewMemberLog>(_entities[9].properties[5]);
}

/// [Attendance] entity fields to define ObjectBox queries.
class Attendance_ {
  /// see [Attendance.id]
  static final id =
      QueryIntegerProperty<Attendance>(_entities[10].properties[0]);

  /// see [Attendance.memberId]
  static final memberId =
      QueryIntegerProperty<Attendance>(_entities[10].properties[1]);

  /// see [Attendance.checkInTime]
  static final checkInTime =
      QueryIntegerProperty<Attendance>(_entities[10].properties[2]);

  /// see [Attendance.checkOutTime]
  static final checkOutTime =
      QueryIntegerProperty<Attendance>(_entities[10].properties[3]);
}
